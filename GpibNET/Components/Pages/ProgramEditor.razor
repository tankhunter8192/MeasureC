@page "/program/{Id:int}"
@using Gpib.Web.Data
@using Gpib.Web.Data.DBClasses
@using Gpib.Web.LanguageHandling
@using InfluxDB.Client.Api.Domain
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext Context 
@inject NavigationManager NavigationManager

<h1>@(IsNew ? "Create" : "Edit") Program File</h1>

<EditForm Model="@ProgramFile" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="ProgramFile.Name" class="form-control" />
        <ValidationMessage For="@(() => ProgramFile.Name)" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <InputTextArea @bind-Value="ProgramFile.Description" class="form-control"></InputTextArea>
        <ValidationMessage For="@(() => ProgramFile.Description)" />
    </div>

    <div class="form-group">
        <label>Content</label>
        <textarea id="editor" class="form-control"></textarea>
        <ValidationMessage For="@(() => ProgramFile.Content)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-check" @onclick="() => Test()">Test</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private bool IsNew => Id == 0;
    private ProgramFile ProgramFile { get; set; } = new ProgramFile();
    private IJSObjectReference? _module;

    protected override async Task OnInitializedAsync()
    {
        if (!IsNew)
        {
            ProgramFile = await Context.ProgramFiles.FindAsync(Id);
            if (ProgramFile is null)
            {
                //new case
                NavigationManager.NavigateTo("/program/0");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/ProgramEditor.razor.js");

            await _module.InvokeVoidAsync("initialize", "editor");

            // Vorhandenen Content in Editor laden
            if (!IsNew)
            {
                await _module.InvokeVoidAsync("setContent", "editor", ProgramFile.Content);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Content aus Editor holen
            if (_module != null)
            {
                ProgramFile.Content = await _module.InvokeAsync<string>("getContent");
            }

            if (IsNew)
            {
                await Context.ProgramFiles.AddAsync(ProgramFile);
            }
            else
            {
                Context.ProgramFiles.Update(ProgramFile);
            }

            await Context.SaveChangesAsync();
            NavigationManager.NavigateTo("/programs");
        }
        catch (Exception ex)
        {
            GlobalStaticVariables.Logger.Log(LogSeverity.Error, "Program Editor @ Handle Valid Submit: ", " There was the exception: " + ex.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("dispose");
            await _module.DisposeAsync();
        }
    }

    private async Task Test()
    {
        try
        {
            if (_module != null)
            {
                var res = await _module.InvokeAsync<string>("getContent");
                ProgramFile.Content = res;
            }

            if (IsNew)
            {
                await Context.ProgramFiles.AddAsync(ProgramFile);
            }
            else
            {
                Context.ProgramFiles.Update(ProgramFile);
            }
            await Context.SaveChangesAsync();
            MeasureLanguage ml = new MeasureLanguage();
            var result = ml.Test(ProgramFile);
            if (result.Count == 0)
            {
                //TODO: show success message
                //all good state
            }
            else
            {

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/programs");
    }
}